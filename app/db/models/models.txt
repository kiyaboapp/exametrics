# app/db/models/__init__.py

from .school import School, SchoolType
from .student import Student, Sex
from .examination_board import ExamBoard
from .exam import Exam, AvgStyle, ExamLevel
from .exam_division import ExamDivision
from .exam_grade import ExamGrade
from .subject import Subject
from .exam_subject import ExamSubject
from .result import Result
from .student_subject import StudentSubject
from .user import User, Role
from .user_exam import UserExam, UserExamRole
from .region import Region
from .ward import Ward
from .council import Council

__all__ = [
    "School",
    "SchoolType",
    "Student",
    "Sex",
    "ExamBoard",
    "Exam",
    "AvgStyle",
    "ExamLevel",
    "ExamDivision",
    "ExamGrade",
    "Subject",
    "ExamSubject",
    "Result",
    "StudentSubject",
    "User",
    "Role",
    "UserExam",
    "UserExamRole",
    "Region",
    "Council",
    "Ward"
]

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.db.database import Base

class Council(Base):
    __tablename__ = "councils"

    council_id = Column(Integer, primary_key=True, autoincrement=True)
    council_name = Column(String(50), unique=True, nullable=False)
    region_id = Column(Integer, ForeignKey("regions.region_id", onupdate="CASCADE"), nullable=False)

    # Relationships
    region = relationship("Region", back_populates="councils")
    wards = relationship("Ward", back_populates="council")
    schools = relationship("School", back_populates="council")


from sqlalchemy import Column, String, Integer, ForeignKey, UniqueConstraint
from sqlalchemy.orm import relationship
from app.db.database import Base

class ExamDivision(Base):
    __tablename__ = "exam_divisions"
    id=Column(Integer,autoincrement=True)
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"))
    division = Column(String(3), nullable=False)
    lowest_points = Column(Integer, nullable=False)
    highest_points = Column(Integer, nullable=False)

    # RELATIONSHIPS
    exam = relationship("Exam", back_populates="exam_divisions")

    # UNIQUE TOGETEHR
    __table_args__ = (
        UniqueConstraint('exam_id', 'division'),
    )


from sqlalchemy import Column, String, Float, Integer, ForeignKey, UniqueConstraint
from sqlalchemy.orm import relationship
from app.db.database import Base

class ExamGrade(Base):
    __tablename__ = "exam_grades"
    id=Column(Integer,autoincrement=True)
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"))
    grade = Column(String(2), nullable=False)
    lower_value = Column(Float, nullable=False)
    highest_value = Column(Float, nullable=False)
    grade_points = Column(Float, nullable=False)
    division_points = Column(Integer, nullable=False)

    # RELATIONSHIPS
    exam = relationship("Exam", back_populates="exam_grades")

    # UNIQUE TOGETHER
    __table_args__ = (
        UniqueConstraint('exam_id', 'grade'),
    )



from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, Index, text,UniqueConstraint
from sqlalchemy.orm import relationship
from app.db.database import Base

class ExamSubject(Base):
    __tablename__ = "exam_subjects"
    id=Column(Integer,autoincrement=True)
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"))
    subject_code = Column(String(10), ForeignKey("subjects.subject_code", onupdate="CASCADE"))
    subject_name = Column(String(50), nullable=False)
    subject_short = Column(String(50), nullable=False)
    is_present = Column(Boolean, nullable=True)
    has_practical = Column(Boolean, nullable=False)
    display_name = Column(String(30), server_default=text("CONCAT(subject_code, '-', subject_short)"))
    exclude_from_gpa = Column(Boolean, nullable=False)

    #RELATIONSHIPS
    exam = relationship("Exam", back_populates="exam_subjects")
    subject = relationship("Subject", back_populates="exam_subjects")
    student_subjects = relationship("StudentSubject", back_populates="exam_subject")


    # UNIQUE TOGETEHR
    __table_args__ = (
        UniqueConstraint('exam_id', 'subject_code'),
    )


from sqlalchemy import Column, String, Date, Enum, ForeignKey, Index
from sqlalchemy.orm import relationship
from app.db.database import Base
import enum
from uuid6 import uuid6

class AvgStyle(str, enum.Enum):
    AUTO = "AUTO"
    SEVEN_BEST = "SEVEN_BEST"
    EIGHT_BEST = "EIGHT_BEST"

class ExamLevel(str, enum.Enum):
    STNA = "STNA"
    SFNA = "SFNA"
    PSLE = "PSLE"
    FTNA = "FTNA"
    CSEE = "CSEE"
    ACSEE = "ACSEE"

class Exam(Base):
    __tablename__ = "exams"
    exam_id = Column(String(36), primary_key=True, default=lambda: str(uuid6()))
    board_id = Column(String(36), ForeignKey("exam_boards.board_id", onupdate="CASCADE"), nullable=False)
    exam_name = Column(String(100), nullable=False)
    exam_name_swahili = Column(String(100))
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=False)
    avg_style = Column(Enum(AvgStyle), nullable=False)
    exam_level = Column(Enum(ExamLevel), nullable=False)

    # RELATIONSHIPS
    board = relationship("ExamBoard", back_populates="exams")
    students = relationship("Student", back_populates="exam")
    results = relationship("Result", back_populates="exam")
    exam_subjects = relationship("ExamSubject", back_populates="exam")
    exam_divisions = relationship("ExamDivision", back_populates="exam")
    exam_grades = relationship("ExamGrade", back_populates="exam")
    user_exams = relationship("UserExam", back_populates="exam")


from sqlalchemy import Column, String
from sqlalchemy.orm import relationship
from uuid6 import uuid6
from app.db.database import Base

class ExamBoard(Base):
    __tablename__ = "exam_boards"

    board_id = Column(String(36), primary_key=True, default=lambda: str(uuid6()))
    name = Column(String(100), nullable=False)
    location = Column(String(100))
    chairman = Column(String(100))
    secretary = Column(String(100))

    # Relationship
    exams = relationship("Exam", back_populates="board")

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from app.db.database import Base

class Region(Base):
    __tablename__ = "regions"

    region_id = Column(Integer, primary_key=True, autoincrement=True)
    region_name = Column(String(50), unique=True, nullable=False)

    # Relationships
    councils = relationship("Council", back_populates="region")
    schools = relationship("School", back_populates="region")

from sqlalchemy import Column, String, Float, Integer, ForeignKey, DateTime, Index, text,UniqueConstraint
from sqlalchemy.orm import relationship
from app.db.database import Base

class Result(Base):
    __tablename__ = "results"
    id=Column(Integer,autoincrement=True)
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"))
    student_global_id=Column(String(36), ForeignKey("students.student_global_id", ondelete="CASCADE"))
    centre_number = Column(String(10), ForeignKey("schools.centre_number", ondelete="CASCADE"))
    avg_marks = Column(Float)
    total_marks = Column(Float)
    division = Column(String(3))
    total_points = Column(Integer)
    pos = Column(Integer)
    out_of = Column(Integer)
    ward_pos = Column(Integer)
    ward_out_of = Column(Integer)
    council_pos = Column(Integer)
    council_out_of = Column(Integer)
    region_pos = Column(Integer)
    region_out_of = Column(Integer)
    ward_pos_gvt = Column(Integer)
    ward_pos_pvt = Column(Integer)
    ward_pos_unknown = Column(Integer)
    council_pos_gvt = Column(Integer)
    council_pos_pvt = Column(Integer)
    council_pos_unknown = Column(Integer)
    region_pos_gvt = Column(Integer)
    region_pos_pvt = Column(Integer)
    region_pos_unknown = Column(Integer)
    first_marks = Column(Float)
    second_marks = Column(Float)
    third_marks = Column(Float)
    fourth_marks = Column(Float)
    fifth_marks = Column(Float)
    sixth_marks = Column(Float)
    seventh_marks = Column(Float)
    created_at = Column(DateTime, server_default=text('CURRENT_TIMESTAMP'))

    # RELATIONHIPS
    student = relationship("Student", back_populates="results")
    exam = relationship("Exam", back_populates="results")

    __table_args__ = (
        UniqueConstraint('exam_id', 'student_id', 'centre_number'),
    )

from sqlalchemy import Column, String, Enum, Index
from sqlalchemy.orm import relationship
from app.db.database import Base
from app.db.models.school import SchoolType


class School(Base):
    __tablename__ = "schools"
    centre_number = Column(String(10), primary_key=True)
    school_name = Column(String(100), nullable=False)
    region_name = Column(String(50), index=True)
    council_name = Column(String(50), index=True)
    ward_name = Column(String(100), index=True)

    # RELATIONSHIPS
    school_type = Column(Enum(SchoolType), nullable=False)
    students = relationship("Student", back_populates="school")
    users = relationship("User", back_populates="school")
    

from sqlalchemy import Column, String, Float, Integer, ForeignKey, DateTime, Index, text,UniqueConstraint
from sqlalchemy.orm import relationship
from app.db.database import Base

class StudentSubject(Base):
    __tablename__ = "student_subjects"
    id=Column(Integer,autoincrement=True)
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"))
    student_global_id=Column(String(36), ForeignKey("students.student_global_id", ondelete="CASCADE"))
    centre_number = Column(String(10), ForeignKey("schools.centre_number", ondelete="CASCADE"))
    subject_code = Column(String(10), ForeignKey("subjects.subject_code", ondelete="CASCADE"))
    theory_marks = Column(Float)
    practical_marks = Column(Float)
    overall_marks = Column(Float)
    subj_pos = Column(Integer)
    subj_ward_pos = Column(Integer)
    subj_council_pos = Column(Integer)
    subj_region_pos = Column(Integer)
    subj_ward_pos_gvt = Column(Integer)
    subj_ward_pos_pvt = Column(Integer)
    subj_ward_pos_unknown = Column(Integer)
    subj_council_pos_gvt = Column(Integer)
    subj_council_pos_pvt = Column(Integer)
    subj_council_pos_unknown = Column(Integer)
    subj_region_pos_gvt = Column(Integer)
    subj_region_pos_pvt = Column(Integer)
    subj_region_pos_unknown = Column(Integer)
    submitted_by = Column(String(100))
    subj_pos_out_of = Column(Integer)
    subj_ward_pos_out_of = Column(Integer)
    subj_council_pos_out_of = Column(Integer)
    subj_region_pos_out_of = Column(Integer)
    subj_ward_pos_gvt_out_of = Column(Integer)
    subj_ward_pos_pvt_out_of = Column(Integer)
    subj_ward_pos_unknown_out_of = Column(Integer)
    subj_council_pos_gvt_out_of = Column(Integer)
    subj_council_pos_pvt_out_of = Column(Integer)
    subj_council_pos_unknown_out_of = Column(Integer)
    subj_region_pos_gvt_out_of = Column(Integer)
    subj_region_pos_pvt_out_of = Column(Integer)
    subj_region_pos_unknown_out_of = Column(Integer)
    created_at = Column(DateTime, server_default=text('CURRENT_TIMESTAMP'))

    # RELATIONSHIPS
    student = relationship("Student", back_populates="student_subjects")
    exam = relationship("Exam", back_populates="student_subjects")
    exam_subject = relationship("ExamSubject", back_populates="student_subjects")

    # UNIQUE TOGETHER
    __table_args__=(
        UniqueConstraint("exam_id","centre_number","student_global_id")
    )


from sqlalchemy import Column, Integer, String, Enum, DateTime, ForeignKey, Index, UniqueConstraint, text
from sqlalchemy.orm import relationship
from app.db.database import Base
import enum
from uuid6 import uuid6

class Sex(str, enum.Enum):
    MALE = "M"
    FEMALE = "F"
    OTHER = "OTHER"

class Student(Base):
    __tablename__ = "students"
    student_global_id=Column(String(36),primary=True,default=lambda: str(uuid6()))
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"), nullable=False)
    student_id = Column(String(20), nullable=False)
    centre_number = Column(String(10), ForeignKey("schools.centre_number", ondelete="CASCADE"), nullable=False)
    first_name = Column(String(50), nullable=False)
    middle_name = Column(String(50))
    surname = Column(String(50), nullable=False)
    full_name = Column(String(150), server_default=text("CONCAT(first_name, ' ', COALESCE(middle_name, ''), ' ', surname)"))
    sex = Column(Enum(Sex), nullable=False)
    created_at = Column(DateTime, server_default=text('CURRENT_TIMESTAMP'))

    # RELATIONSHIP
    school = relationship("School", back_populates="students")
    exam = relationship("Exam", back_populates="students")
    results = relationship("Result", back_populates="student")
    student_subjects = relationship("StudentSubject", back_populates="student")

    # UNIQUE TOGETEHR
    __table_args__ = (
        UniqueConstraint('exam_id', 'student_id', 'centre_number'),
    )

from sqlalchemy import Column, String, Boolean
from sqlalchemy.orm import relationship
from app.db.base import Base

class Subject(Base):
    __tablename__ = "subjects"

    subject_code = Column(String(10), primary_key=True)
    subject_name = Column(String(50), nullable=False)
    subject_short = Column(String(50), nullable=False)
    has_practical = Column(Boolean, nullable=False,default=False)
    exclude_from_gpa=Column(Boolean,default=False)

    # Relationships
    exam_subjects = relationship("ExamSubject", back_populates="subject")

from sqlalchemy import Column, Integer, String, Enum, ForeignKey, JSON
from sqlalchemy.orm import relationship
from app.db.database import Base
import enum

class UserExamRole(str, enum.Enum):
    VIEWER = "VIEWER"
    UPLOADER = "UPLOADER"
    EXAM_ADMIN = "EXAM_ADMIN"

class UserExam(Base):
    __tablename__ = "user_exams"

    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), primary_key=True)
    exam_id = Column(String(36), ForeignKey("exams.exam_id", ondelete="CASCADE"), primary_key=True)
    role = Column(Enum(UserExamRole), nullable=False)

    # Flexible permissions stored as JSON
    permissions = Column(JSON, nullable=False, default=lambda: {
        "edit": False,
        "view": True,
        "upload_results": False,
        "download_analysis": False,
        "view_progress": False,
        "manage_users": False,
    })

    # Relationships
    user = relationship("User", back_populates="user_exams")
    exam = relationship("Exam", back_populates="user_exams")

    # Permission helpers
    def has_permission(self, perm_name: str) -> bool:
        # Admin role shortcut
        if self.role == UserExamRole.EXAM_ADMIN:
            return True
        return self.permissions.get(perm_name, False)

    def set_permission(self, perm_name: str, value: bool) -> None:
        self.permissions[perm_name] = value

    def all_permissions(self):
        if self.role == UserExamRole.EXAM_ADMIN:
            # Admins have all permissions enabled
            return {key: True for key in self.permissions.keys()}
        return self.permissions

from sqlalchemy import Column, Integer, String, Enum, DateTime, Boolean, ForeignKey
from sqlalchemy.sql import text
from sqlalchemy.orm import relationship
from app.db.base import Base
import enum
from uuid6 import uuid6

class Role(str, enum.Enum):
    USER = "USER"
    TEACHER = "TEACHER"
    ACADEMIC_MASTER = "ACADEMIC_MASTER"
    HEAD_OF_SCHOOL = "HEAD_OF_SCHOOL"
    WEO = "WEO"
    DEO = "DEO"
    REO = "REO"
    ADMIN = "ADMIN"

class User(Base):
    __tablename__ = "users"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid6()))
    username = Column(String(255), unique=True, nullable=False)
    email = Column(String(255), unique=True, nullable=False)
    first_name = Column(String(255), nullable=False)
    middle_name = Column(String(255))
    surname = Column(String(255), nullable=False)
    role = Column(Enum(Role), nullable=False)
    hashed_password = Column(String(255), nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=text('CURRENT_TIMESTAMP'))
    updated_at = Column(DateTime, nullable=False, server_default=text('CURRENT_TIMESTAMP'))
    is_active = Column(Boolean, nullable=False, default=True)
    is_verified = Column(Boolean, nullable=False, default=False)
    verification_token = Column(String(255))
    verification_token_expires = Column(DateTime)
    reset_token = Column(String(255))
    reset_token_expires = Column(DateTime)
    google_id = Column(String(255), unique=True)
    is_google_account = Column(Boolean, default=False)
    last_login = Column(DateTime)

    # Foreign key to School
    centre_number = Column(String(10), ForeignKey("schools.centre_number", ondelete="SET NULL"))

    # Relationships
    school = relationship("School", back_populates="users")
    user_exams = relationship("UserExam", back_populates="user")

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.db.database import Base

class Ward(Base):
    __tablename__ = "wards"

    ward_id = Column(Integer, primary_key=True)
    ward_name = Column(String(100), nullable=False)
    council_id = Column(Integer, ForeignKey("councils.council_id", onupdate="CASCADE"), nullable=False)

    # Relationships
    council = relationship("Council", back_populates="wards")
    schools = relationship("School", back_populates="ward")









app/db/__init__
from .database import Base, get_db, init_db
from .models import (
    Region, Council, Ward, 
    School, User, UserExam, ExamBoard,
    Exam, ExamDivision, ExamGrade, Subject, ExamSubject,
    Student, Result, StudentSubject
)

__all__ = [
    "Base",
    "get_db",
    "init_db",
    "Region",
    "Council",
    "Ward",
    "School",
    "User",
    "UserExam",
    "ExamBoard",
    "Exam",
    "ExamDivision",
    "ExamGrade",
    "Subject",
    "ExamSubject",
    "Student",
    "Result",
    "StudentSubject",
    "Region",
    "Council",
    "Ward"
]